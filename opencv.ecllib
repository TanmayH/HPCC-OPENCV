/*Service for the License Plate detection*/
SHARED LicenseService := SERVICE : namespace('OPENCVLib'), plugin('opencv')
    STRING GETLICENSEPLATE(VARSTRING s) : cpp,entrypoint='licenseplate';
END;

/*Service for Edge Detection*/
SHARED EdgeService := SERVICE : namespace('OPENCVLib'), plugin('opencv')
    INTEGER DETECT_EDGE(VARSTRING s) : cpp,entrypoint='edge_detect';
END;

/*Service for OpenCVHandlers*/
SHARED OpenCVService := SERVICE : namespace('OPENCVLib'), plugin('opencv')
    INTEGER GAUSSBLUR(VARSTRING s,VARSTRING d,INTEGER depth) : cpp,entrypoint='gaussblur';
    INTEGER GRAYSCALE(VARSTRING s,VARSTRING d) : cpp,entrypoint='grayscale';
    INTEGER THRESH_HOLD(VARSTRING s,VARSTRING d,REAL threshval,REAL maxval=255,INTEGER type_1=0) : cpp,entrypoint='threshold_img';
    INTEGER RESIZE(VARSTRING s,VARSTRING d, REAL fx, REAL fy) : cpp,entrypoint='resize';
    INTEGER TRANSLATE(VARSTRING s,VARSTRING d,REAL x, REAL y) : cpp,entrypoint='translate_img';
    INTEGER ROTATE(VARSTRING s,VARSTRING d, REAL angle) : cpp,entrypoint='rotate_img';
END;

/*Exported Module*/
EXPORT opencv := MODULE

    /*Get LicensePlate function*/
    /* Input: Path to Image
       Output: License Plate Characters*/ 
    EXPORT GETLICENSEPLATE(VARSTRING s) := FUNCTION
        result:=LicenseService.GETLICENSEPLATE(s);
        RETURN result;
    END;

    /*Detect Edge function*/
    /* Input: Path to Image
       Output: Edge Detection Window*/ 
    EXPORT DETECT_EDGE(VARSTRING s) := FUNCTION
        result:=EdgeService.DETECT_EDGE(s);
        RETURN result;
    END;

    /*Gaussian Blur function*/
    /* Input: Path to Image, Destination Path, Scale of Gaussian Kernel (odd integer)
       Output: 0 on success, -1 on failure*/
    EXPORT GAUSSBLUR(VARSTRING s,VARSTRING d, INTEGER depth) := FUNCTION
        result:=OpenCVService.GAUSSBLUR(s,d,depth);
        RETURN result;
    END;

    /*Grayscale function*/
    /* Input: Path to Image, Destination Path
       Output: 0 on success, -1 on failure*/
    EXPORT GRAYSCALE(VARSTRING s,VARSTRING d) := FUNCTION
        result:=OpenCVService.GRAYSCALE(s,d);
        RETURN result;
    END;

    /*Thresholding function*/
    /* Input: Path to Image, Destination Path, Real threshval, Real maxval, Integer type
       Output: 0 on success, -1 on failure*/
    EXPORT THRESH_HOLD(VARSTRING s,VARSTRING d,REAL threshval,REAL maxval=255,INTEGER type_1=0) := FUNCTION
        result:=OpenCVService.THRESH_HOLD(s,d,threshval);
        RETURN result;
    END;

    /*Resizing function*/
    /* Input: Path to Image, Destination Path, Real x and y resizing coordinates as decimals
       Output: 0 on success, -1 on failure*/
    EXPORT RESIZE(VARSTRING s,VARSTRING d, REAL fx, REAL fy) := FUNCTION
        result:=OpenCVService.RESIZE(s,d,fx,fy);
        RETURN result;
    END;

    /*Translating an image function*/
    /* Input: Path to Image, Destination Path, Real x and y shifts
       Output: 0 on success, -1 on failure*/
    EXPORT TRANSLATE(VARSTRING s,VARSTRING d,REAL x, REAL y) := FUNCTION
        result:=OpenCVService.TRANSLATE(s,d,x,y);
        RETURN result;
    END;

    /*Rotating an image function*/
    /* Input: Path to Image, Destination Path, angle of rotation in degrees 
       Output: 0 on success, -1 on failure*/
    EXPORT ROTATE(VARSTRING s,VARSTRING d, REAL angle) := FUNCTION
        result:=OpenCVService.ROTATE(s,d,angle);
        RETURN result;
    END;

END;
